#ifndef SRC_S21_SPRINTF_H_
#define SRC_S21_SPRINTF_H_

#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>
#include "s21_sprintf_utils.h"
#include "s21_sprintf_options.h"
#include "s21_sprintf_template.h"

#define BUFSIZE 1000

typedef struct variables {
  int errorFlag;
  char* Chbuf;
  char* temp;
  char* tmp_ptr;
} var;

int s21_sprintf(char *str, const char *format, ...);

void free_at_exit(var *variables);
void mem_check(char *str, var *variables);

int C_specifier(char **str, opt options, va_list var_arg, var *variables);
void C_sol_fork(opt options, va_list var_arg, var *variables);
int wstrlen(wchar_t *wstr);
void WchInStr(char *str, wchar_t *wstr,int len);
void add_sign(char **buf, char sign, var* variables);

#endif  // SRC_S21_SPRINTF_H_

// Порядок обработки: Спецификатор -> Длина -> Точность -> Ширина -> Флаги
/*
Спецификаторы: c, d, i, f, s, u, %, g, G, e, E, x, X, o, n, p
Флаги: #, 0, -, +, (пробел)
Ширина: *,(число)
Точность: .*,.(число)
Длина: L, h, l

%|flags|(min field width)|.|precision(max field width)|length
description|specifier

sprintf() не обеспечивает никакой проверки переполнения массива, адресуемого
указателем str/buf. Это значит, что массив будет переполнен, если объем выводимых
символов превысит длину массива.

ФЛАГИ:
1 - Выравнивание по левому краю в пределах заданной ширины поля;
    Выравнивание по правому краю используется по умолчанию (см. подспецификатор
ширины). 
2 + Заставляет явно указывать знак плюс или минус (+ или -) даже для 
положительных чисел. По умолчанию только отрицательным числам предшествует знак
"-". 
3 (пробел) Если знак не будет выведен, перед значением вставляется пробел.
4 # При использовании со спецификаторами o, x или X перед числом вставляется 0,
0x или 0X соответственно (для значений, отличных от нуля). При использовании с
e, E и f "заставляет" записанный вывод содержать десятичную точку, даже если за
ней не последует никаких цифр. По умолчанию, если не следует никаких цифр,
десятичная точка не записывается. При использовании с g или G результат такой
же, как и с e или E, но конечные нули не удаляются.
+5 0 Заполняет число слева
нулями (0) вместо пробелов, где указан спецификатор ширины (см. подспецификатор
ширины).

ШИРИНА:
1 (число) Минимальное количество печатаемых символов. Если выводимое значение
короче этого числа, результат дополняется пробелами. Значение не усекается, даже
если результат больше.
 2 * В sprintf знак * значит, что ширина указывается не в
строке формата, а в качестве дополнительного аргумента целочисленного значения,
предшествующего аргументу, который необходимо отформатировать. В sscanf знак *,
помещенный после % и перед спецификатором формата, считывает данные указанного
типа, но подавляет их присваивание.

ТОЧНОСТЬ:
1 .число Для целочисленных спецификаторов (d, i, o, u, x, X) − точность
определяет минимальное количество записываемых цифр. Если записываемое значение
короче этого числа, результат дополняется ведущими нулями. Значение не
усекается, даже если результат длиннее. Точность 0 означает, что для значения 0
         не записывается ни одного символа. 
         
         Для спецификаторов e, E и f − это
количество цифр, которые должны быть напечатаны после десятичной точки. Для
спецификаторов g и G − это максимальное количество значащих цифр, которые должны
быть напечатаны. Для s − это максимальное количество печатаемых символов. 
По умолчанию все символы печатаются до тех пор, пока не встретится терминирующий
нуль. Для типа с − никак не влияет. Если точность не указана для спецификаторов
e, E, f, g и G, то по умолчанию ее значение равно 6. Если точность не указана
для остальных спецификаторов, то по умолчанию ее значение равно 1. Если число не
указано (нет явного значения точности), то по умолчанию - 0.
 2 .* Точность
указывается не в строке формата, а в качестве дополнительного аргумента
целочисленного значения, предшествующего аргументу, который должен быть
отформатирован.

ДЛИНА:
1 h Аргумент интерпретируется как короткое int или короткое int без знака
    (применяется только к целочисленным спецификаторам: i, d, o, u, x и X).
2 l Аргумент интерпретируется как длинное int или длинное int без знака
    для целочисленных спецификаторов (i, d, o, u, x и X) и как широкий символ
    или строка широких символов для спецификаторов c и s.
3 L Аргумент интерпретируется как длинный double
    (применяется только к спецификаторам с плавающей точкой − e, E, f, g и G).

СПЕЦИФИКАТОРЫ:
1 c Символ                                                                    | Д
2 d Знаковое десятичное целое число                                           | А
3 i Знаковое десятичное целое число                                           | А
4 e Научная нотация (мантисса/экспонента) с использованием символа e (вывод
чисел должен совпадать с точностью до e-6)                                    |
5 E Научная нотация (мантисса/экспонента) с использованием символа Е          |
6 f Десятичное число с плавающей точкой                                       | Д
7 g Использует кратчайший из представлений десятичного числа                  | Д
8 G Использует кратчайший из представлений десятичного числа                  | Д
9 o Беззнаковое восьмеричное число                                            | A
10 s Строка                                                                   | Д
11 u Беззнаковое десятичное целое число                                       | А
12 x Беззнаковое шестнадцатеричное целое число                                | A
13 X Беззнаковое шестнадцатеричное целое число (заглавные буквы)              | A
14 p Адрес указателя                                                          | Д
15 n Количество символов, напечатанных до появления %n                        |
16 % Символ %                                                                 |

flag ' ' is ignored when flag '+' is present 
flag '0' is ignored when flag '-' is present

*/